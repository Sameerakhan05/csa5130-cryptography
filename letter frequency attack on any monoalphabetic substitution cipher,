#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

#define MAX_LEN 1000
#define TOP_GUESSES 10
#define ALPHABET_LEN 26

// English letter frequency order (most common to least)
const char english_freq[] = "ETAOINSHRDLCUMWFGYPBVKJXQZ";

// Count frequency of letters A-Z in text
void count_frequencies(const char *text, int *freq) {
    for (int i = 0; i < ALPHABET_LEN; i++) freq[i] = 0;

    for (int i = 0; text[i]; i++) {
        if (isalpha(text[i])) {
            freq[toupper(text[i]) - 'A']++;
        }
    }
}

// Sort letters in order of frequency from ciphertext
void sort_by_freq(int *freq, char *sorted_letters) {
    int used[ALPHABET_LEN] = {0};

    for (int i = 0; i < ALPHABET_LEN; i++) {
        int max_idx = -1;
        for (int j = 0; j < ALPHABET_LEN; j++) {
            if (!used[j] && (max_idx == -1 || freq[j] > freq[max_idx]))
                max_idx = j;
        }
        sorted_letters[i] = 'A' + max_idx;
        used[max_idx] = 1;
    }
}

// Apply a guessed mapping (frequency match)
void apply_mapping(const char *ciphertext, char *plaintext, const char *map) {
    for (int i = 0; ciphertext[i]; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            char mapped = map[toupper(ciphertext[i]) - 'A'];
            plaintext[i] = isupper(ciphertext[i]) ? mapped : tolower(mapped);
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

int main() {
    char ciphertext[MAX_LEN];
    char sorted_letters[ALPHABET_LEN + 1];
    char guessed_map[ALPHABET_LEN + 1];
    char plaintext[MAX_LEN];
    int freq[ALPHABET_LEN];

    printf("Enter ciphertext: ");
    fgets(ciphertext, MAX_LEN, stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';

    count_frequencies(ciphertext, freq);
    sort_by_freq(freq, sorted_letters);

    printf("\nTop %d guesses using letter frequency matching:\n", TOP_GUESSES);
    for (int guess = 0; guess < TOP_GUESSES && guess < ALPHABET_LEN; guess++) {
        for (int i = 0; i < ALPHABET_LEN; i++) {
            guessed_map[sorted_letters[i] - 'A'] = english_freq[(i + guess) % ALPHABET_LEN];
        }
        guessed_map[ALPHABET_LEN] = '\0';

        apply_mapping(ciphertext, plaintext, guessed_map);
        printf("%2d: %s\n", guess + 1, plaintext);
    }

    return 0;
}
