#include <stdio.h>
#include <stdlib.h>

#define MOD 26

// Helper: Modular inverse
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++)
        if ((a * x) % m == 1)
            return x;
    return -1;
}

// Helper: Matrix inverse mod 26 (only for 2x2)
int inverseMatrix(int mat[2][2], int inv[2][2]) {
    int det = (mat[0][0]*mat[1][1] - mat[0][1]*mat[1][0]) % MOD;
    if (det < 0) det += MOD;
    int invDet = modInverse(det, MOD);
    if (invDet == -1) return 0;

    inv[0][0] = ( mat[1][1] * invDet) % MOD;
    inv[0][1] = (-mat[0][1] * invDet) % MOD;
    inv[1][0] = (-mat[1][0] * invDet) % MOD;
    inv[1][1] = ( mat[0][0] * invDet) % MOD;

    // Fix negatives
    for (int i = 0; i < 2; i++)
        for (int j = 0; j < 2; j++)
            if (inv[i][j] < 0) inv[i][j] += MOD;
    return 1;
}

// Multiply 2x2 matrices mod 26
void multiplyMatrices(int a[2][2], int b[2][2], int res[2][2]) {
    for (int i = 0; i < 2; i++)
        for (int j = 0; j < 2; j++) {
            res[i][j] = 0;
            for (int k = 0; k < 2; k++)
                res[i][j] += a[i][k] * b[k][j];
            res[i][j] %= MOD;
        }
}

int charToNum(char ch) {
    return ch - 'a';
}

int main() {
    // Suppose attacker knows these:
    // Plaintext pairs: "he", "ll" → [7 4], [11 11]
    // Ciphertext pairs: "KF", "AN" → [10 5], [0 13]

    int P[2][2] = {
        {charToNum('h'), charToNum('e')},
        {charToNum('l'), charToNum('l')}
    };

    int C[2][2] = {
        {charToNum('k'), charToNum('f')},
        {charToNum('a'), charToNum('n')}
    };

    int P_inv[2][2], K[2][2];

    // Compute inverse of P
    if (!inverseMatrix(P, P_inv)) {
        printf("Plaintext matrix is not invertible! Attack failed.\n");
        return 1;
    }

    // Compute K = C × P⁻¹ mod 26
    multiplyMatrices(C, P_inv, K);

    // Output key
    printf("Recovered key matrix from known plaintext-ciphertext pairs:\n");
    printf("[ %2d %2d ]\n", K[0][0], K[0][1]);
    printf("[ %2d %2d ]\n", K[1][0], K[1][1]);

    return 0;
}
