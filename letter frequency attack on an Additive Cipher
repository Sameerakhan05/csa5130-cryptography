#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

#define MAX_TEXT 1000
#define ALPHABET_SIZE 26

// English letter frequencies (% scale)
float english_freq[ALPHABET_SIZE] = {
    12.7, 9.1, 8.2, 7.5, 7.0, 6.7, 6.3, 6.1, 6.0, 5.9,
    4.0, 2.8, 2.4, 2.3, 2.0, 1.9, 1.0, 0.9, 0.2, 0.1,
    0.1, 0.1, 0.1, 0.1, 0.05, 0.02
};

typedef struct {
    int key;
    char plaintext[MAX_TEXT];
    float score;
} Candidate;

int charToIndex(char c) {
    return tolower(c) - 'a';
}

char shiftChar(char c, int shift) {
    if (isalpha(c)) {
        int base = isupper(c) ? 'A' : 'a';
        return (char)((((c - base) + shift + ALPHABET_SIZE) % ALPHABET_SIZE) + base);
    }
    return c;
}

// Score a text based on English frequency matching
float scoreText(const char *text) {
    int counts[ALPHABET_SIZE] = {0}, total = 0;
    for (int i = 0; text[i]; i++) {
        if (isalpha(text[i])) {
            int idx = charToIndex(text[i]);
            counts[idx]++;
            total++;
        }
    }

    if (total == 0) return 0;

    float score = 0;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        float actual_freq = (counts[i] * 100.0f) / total;
        score += english_freq[i] * actual_freq;
    }
    return score;
}

// Compare function for sorting (descending by score)
int compareCandidates(const void *a, const void *b) {
    Candidate *c1 = (Candidate *)a;
    Candidate *c2 = (Candidate *)b;
    if (c2->score > c1->score) return 1;
    if (c2->score < c1->score) return -1;
    return 0;
}

int main() {
    char ciphertext[MAX_TEXT];
    int topN;

    printf("Enter ciphertext (encrypted using Caesar cipher):\n");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = 0;

    printf("How many top results would you like to see? ");
    scanf("%d", &topN);

    Candidate candidates[ALPHABET_SIZE];

    // Try all 26 shifts
    for (int key = 0; key < ALPHABET_SIZE; key++) {
        Candidate c;
        c.key = key;

        for (int i = 0; ciphertext[i]; i++) {
            c.plaintext[i] = shiftChar(ciphertext[i], -key);  // Decrypt
        }
        c.plaintext[strlen(ciphertext)] = '\0';
        c.score = scoreText(c.plaintext);

        candidates[key] = c;
    }

    // Sort by score
    qsort(candidates, ALPHABET_SIZE, sizeof(Candidate), compareCandidates);

    // Output top N results
    printf("\nTop %d most likely plaintexts:\n\n", topN);
    for (int i = 0; i < topN && i < ALPHABET_SIZE; i++) {
        printf("Key %2d: %s\n", candidates[i].key, candidates[i].plaintext);
    }

    return 0;
}
