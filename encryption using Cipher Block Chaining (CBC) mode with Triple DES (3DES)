#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <openssl/des.h>
#include <openssl/rand.h>

#define BLOCK_SIZE 8

void xorBlocks(unsigned char *out, unsigned char *a, unsigned char *b, int len) {
    for (int i = 0; i < len; i++)
        out[i] = a[i] ^ b[i];
}

void encryptCBC3DES(unsigned char *plaintext, int length,
                    unsigned char *key1, unsigned char *key2, unsigned char *key3,
                    unsigned char *iv, unsigned char *ciphertext) {
    
    DES_key_schedule ks1, ks2, ks3;
    DES_set_key_unchecked((const_DES_cblock *)key1, &ks1);
    DES_set_key_unchecked((const_DES_cblock *)key2, &ks2);
    DES_set_key_unchecked((const_DES_cblock *)key3, &ks3);

    unsigned char prev[BLOCK_SIZE];
    memcpy(prev, iv, BLOCK_SIZE);

    for (int i = 0; i < length; i += BLOCK_SIZE) {
        unsigned char block[BLOCK_SIZE], encrypted[BLOCK_SIZE];
        xorBlocks(block, plaintext + i, prev, BLOCK_SIZE);

        DES_ecb3_encrypt((const_DES_cblock *)block,
                         (DES_cblock *)(ciphertext + i),
                         &ks1, &ks2, &ks3, DES_ENCRYPT);

        memcpy(prev, ciphertext + i, BLOCK_SIZE);
    }
}

int main() {
    unsigned char plaintext[] = "Attack at dawn!!!"; // 16 bytes
    int length = strlen((const char *)plaintext);
    if (length % BLOCK_SIZE != 0) {
        printf("Plaintext must be a multiple of 8 bytes.\n");
        return 1;
    }

    unsigned char key1[8] = "12345678";
    unsigned char key2[8] = "23456789";
    unsigned char key3[8] = "34567890";
    unsigned char iv[8];
    unsigned char ciphertext[64];

    // Random IV generation
    if (!RAND_bytes(iv, 8)) {
        fprintf(stderr, "IV generation failed.\n");
        return 1;
    }

    printf("IV: ");
    for (int i = 0; i < 8; i++) printf("%02X ", iv[i]);
    printf("\n");

    encryptCBC3DES(plaintext, length, key1, key2, key3, iv, ciphertext);

    printf("Ciphertext (Hex): ");
    for (int i = 0; i < length; i++)
        printf("%02X ", ciphertext[i]);
    printf("\n");

    return 0;
}
