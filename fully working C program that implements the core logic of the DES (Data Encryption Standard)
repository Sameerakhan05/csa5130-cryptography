#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

// Simplified permutation tables for demo
int initial_permutation[64] = {
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
};

int final_permutation[64] = {
    40, 8, 48, 16, 56, 24, 64, 32,
    39, 7, 47, 15, 55, 23, 63, 31,
    38, 6, 46, 14, 54, 22, 62, 30,
    37, 5, 45, 13, 53, 21, 61, 29,
    36, 4, 44, 12, 52, 20, 60, 28,
    35, 3, 43, 11, 51, 19, 59, 27,
    34, 2, 42, 10, 50, 18, 58, 26,
    33, 1, 41, 9, 49, 17, 57, 25
};

// Basic XOR function
uint32_t feistel(uint32_t half_block, uint64_t subkey) {
    return half_block ^ (subkey & 0xFFFFFFFF);
}

// Apply permutation
uint64_t permute(uint64_t input, int *permutation_table, int size) {
    uint64_t output = 0;
    for (int i = 0; i < size; i++) {
        int bit = (input >> (64 - permutation_table[i])) & 0x1;
        output |= ((uint64_t)bit << (size - 1 - i));
    }
    return output;
}

// Generate 16 subkeys (simplified for demo)
void generate_subkeys(uint64_t key, uint64_t subkeys[16]) {
    for (int i = 0; i < 16; i++) {
        subkeys[i] = (key << i | key >> (56 - i)) & 0xFFFFFFFFFFFFFF; // rotate
    }
}

// Encrypt one block (64 bits)
uint64_t des_encrypt_block(uint64_t plaintext, uint64_t key) {
    uint64_t subkeys[16];
    generate_subkeys(key, subkeys);

    uint64_t ip = permute(plaintext, initial_permutation, 64);

    uint32_t L = (ip >> 32) & 0xFFFFFFFF;
    uint32_t R = ip & 0xFFFFFFFF;

    for (int i = 0; i < 16; i++) {
        uint32_t temp = R;
        R = L ^ feistel(R, subkeys[i]);
        L = temp;
    }

    uint64_t preoutput = ((uint64_t)R << 32) | L;
    uint64_t ciphertext = permute(preoutput, final_permutation, 64);

    return ciphertext;
}

// Decrypt one block (64 bits)
uint64_t des_decrypt_block(uint64_t ciphertext, uint64_t key) {
    uint64_t subkeys[16];
    generate_subkeys(key, subkeys);

    uint64_t ip = permute(ciphertext, initial_permutation, 64);

    uint32_t L = (ip >> 32) & 0xFFFFFFFF;
    uint32_t R = ip & 0xFFFFFFFF;

    for (int i = 15; i >= 0; i--) {
        uint32_t temp = R;
        R = L ^ feistel(R, subkeys[i]);
        L = temp;
    }

    uint64_t preoutput = ((uint64_t)R << 32) | L;
    uint64_t plaintext = permute(preoutput, final_permutation, 64);

    return plaintext;
}

// Print 64-bit as hex
void print_block(uint64_t block, const char *label) {
    printf("%s: 0x%016llX\n", label, (unsigned long long)block);
}

int main() {
    // Sample 64-bit plaintext and 56-bit key
    uint64_t plaintext = 0x0123456789ABCDEF;
    uint64_t key = 0x133457799BBCDFF1;

    printf("=== DES DEMO ===\n");
    print_block(plaintext, "Plaintext");

    uint64_t ciphertext = des_encrypt_block(plaintext, key);
    print_block(ciphertext, "Ciphertext");

    uint64_t decrypted = des_decrypt_block(ciphertext, key);
    print_block(decrypted, "Decrypted");

    return 0;
}
