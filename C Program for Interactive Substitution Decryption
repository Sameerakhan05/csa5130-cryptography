#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_LEN 1000

// Function to count frequency of each character
void countFrequencies(char *text) {
    int freq[256] = {0};
    for (int i = 0; text[i] != '\0'; i++) {
        freq[(unsigned char)text[i]]++;
    }

    printf("Character Frequencies:\n");
    for (int i = 0; i < 256; i++) {
        if (freq[i] > 1 && isprint(i))
            printf("'%c' : %d\n", i, freq[i]);
    }
}

// Function to apply substitution
void applySubstitution(char *text, char map[256]) {
    printf("\nDecrypted Text:\n");
    for (int i = 0; text[i] != '\0'; i++) {
        char ch = text[i];
        if (map[(unsigned char)ch] != 0)
            putchar(map[(unsigned char)ch]);
        else
            putchar(ch); // Show original if not mapped
    }
    printf("\n");
}

int main() {
    char ciphertext[MAX_LEN] =
        "53‡‡†305))6*;4826)4‡.)4‡);806*;48†8¶60))85;;]8*;:‡*8†83"
        "(88)5*†;46(;88*96*?;8)*‡(;485);5*†2:*‡(;4956*2(5*—4)8¶8*"
        ";4069285);)6†8)4‡‡;1(‡9;48081;8:8‡1;48†85;4)485†528806*81"
        "(‡9;48;(88;4(‡?34;48)4‡;161;:188;‡?;";

    printf("Original Ciphertext:\n%s\n\n", ciphertext);

    countFrequencies(ciphertext);

    // Substitution map – update based on analysis
    char map[256] = {0};
    map['‡'] = 'e';
    map[';'] = 't';
    map['4'] = 'h';
    map['8'] = 'o';
    map['†'] = 'r';
    map['5'] = 's';
    map[')'] = 'n';
    map['6'] = 'a';
    map['*'] = 'd';
    map[':'] = 'l';
    map['3'] = 'm';
    map['0'] = 'y';
    map['('] = 'i';
    map['9'] = 'u';
    map['2'] = 'f';
    map['1'] = 'b';
    map['.'] = 'c';
    map['?'] = 'g';
    map[']'] = 'p';
    map['—'] = 'v';
    map['¶'] = 'w';

    applySubstitution(ciphertext, map);

    return 0;
}
