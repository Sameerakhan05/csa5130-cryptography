#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Modular inverse using Extended Euclidean Algorithm
int mod_inverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1) return 0;

    while (a > 1) {
        q = a / m;
        t = m;

        m = a % m;
        a = t;

        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }

    return (x1 < 0) ? x1 + m0 : x1;
}

// DSA-like signing
void dsa_sign(int q, int p, int g, int x, int hash, int *r, int *s) {
    int k, kinv;

    do {
        k = rand() % q;
    } while (k == 0);

    *r = (int)(((long long)mod_exp(g, k, p)) % q);
    kinv = mod_inverse(k, q);
    *s = (kinv * (hash + x * (*r))) % q;
}

// Modular exponentiation
int mod_exp(int base, int exp, int mod) {
    int result = 1;
    base = base % mod;
    while (exp > 0) {
        if (exp % 2 == 1) result = (result * base) % mod;
        exp = exp >> 1;
        base = (base * base) % mod;
    }
    return result;
}

int main() {
    srand(time(NULL));

    // Simulated small DSA parameters
    int p = 23;   // prime modulus
    int q = 11;   // order of subgroup
    int g = 4;    // generator
    int x = 3;    // private key
    int hash = 7; // Simulated hash of message

    printf("Signing message (hash=%d) using DSA...\n", hash);

    for (int i = 0; i < 3; i++) {
        int r, s;
        dsa_sign(q, p, g, x, hash, &r, &s);
        printf("Signature %d: (r=%d, s=%d)\n", i + 1, r, s);
    }

    return 0;
}
