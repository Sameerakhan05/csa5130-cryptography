#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to generate repeating key to match plaintext length
void generateKey(char *text, char *key, char *newKey) {
    int textLen = strlen(text);
    int keyLen = strlen(key);
    for (int i = 0, j = 0; i < textLen; i++) {
        if (isalpha(text[i])) {
            newKey[i] = tolower(key[j % keyLen]);
            j++;
        } else {
            newKey[i] = text[i]; // Preserve non-letters
        }
    }
    newKey[textLen] = '\0';
}

// Function to encrypt text
void encrypt(char *text, char *key, char *cipher) {
    int len = strlen(text);
    for (int i = 0; i < len; i++) {
        if (isalpha(text[i])) {
            char base = isupper(text[i]) ? 'A' : 'a';
            cipher[i] = ((tolower(text[i]) - 'a') + (key[i] - 'a')) % 26 + base;
        } else {
            cipher[i] = text[i]; // Leave punctuation, spaces, etc.
        }
    }
    cipher[len] = '\0';
}

int main() {
    char plaintext[1000], key[100], newKey[1000], cipher[1000];

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0';

    printf("Enter the key: ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = '\0';

    generateKey(plaintext, key, newKey);
    encrypt(plaintext, newKey, cipher);

    printf("Encrypted text: %s\n", cipher);

    return 0;
}
