#include <stdio.h>
#include <stdint.h>
#include <string.h>

#define BLOCK_SIZE 16  // 128 bits
#define Rb128 0x87

// Simulated AES encryption for demo (just XOR key for now)
void AES_encrypt(uint8_t *input, uint8_t *key, uint8_t *output) {
    for (int i = 0; i < BLOCK_SIZE; i++)
        output[i] = input[i] ^ key[i];
}

// Left shift by 1 bit
void left_shift(uint8_t *input, uint8_t *output) {
    uint8_t overflow = 0;
    for (int i = BLOCK_SIZE - 1; i >= 0; i--) {
        uint8_t next_overflow = (input[i] & 0x80) ? 1 : 0;
        output[i] = (input[i] << 1) | overflow;
        overflow = next_overflow;
    }
}

// XOR with Rb if MSB was 1
void xor_rb(uint8_t *data) {
    data[BLOCK_SIZE - 1] ^= Rb128;
}

// Print hexadecimal output
void print_hex(const char *label, uint8_t *data) {
    printf("%s: ", label);
    for (int i = 0; i < BLOCK_SIZE; i++)
        printf("%02X", data[i]);
    printf("\n");
}

int main() {
    uint8_t key[BLOCK_SIZE] = {
        0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
        0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C
    };

    uint8_t zero_block[BLOCK_SIZE] = {0};
    uint8_t L[BLOCK_SIZE], K1[BLOCK_SIZE], K2[BLOCK_SIZE];

    // Step 1: L = AES_K(0)
    AES_encrypt(zero_block, key, L);
    print_hex("L", L);

    // Step 2: Generate K1
    uint8_t msb_L = L[0] & 0x80;
    left_shift(L, K1);
    if (msb_L) xor_rb(K1);
    print_hex("K1", K1);

    // Step 3: Generate K2
    uint8_t msb_K1 = K1[0] & 0x80;
    left_shift(K1, K2);
    if (msb_K1) xor_rb(K2);
    print_hex("K2", K2);

    return 0;
}
