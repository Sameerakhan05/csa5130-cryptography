#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to encrypt using monoalphabetic cipher
void monoalphabeticEncrypt(char *plaintext, char *cipherAlphabet) {
    for (int i = 0; plaintext[i] != '\0'; i++) {
        char ch = plaintext[i];

        if (isalpha(ch)) {
            int index = tolower(ch) - 'a'; // Get index in alphabet
            char cipherChar = cipherAlphabet[index];

            // Preserve case
            plaintext[i] = isupper(ch) ? toupper(cipherChar) : cipherChar;
        }
    }
}

int main() {
    char plaintext[1000];
    char cipherAlphabet[27];  // 26 letters + null terminator

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);

    // Remove newline character if present
    size_t len = strlen(plaintext);
    if (plaintext[len - 1] == '\n') {
        plaintext[len - 1] = '\0';
    }

    printf("Enter a 26-letter cipher alphabet (e.g., QWERTYUIOPASDFGHJKLZXCVBNM):\n");
    fgets(cipherAlphabet, sizeof(cipherAlphabet), stdin);

    // Remove newline from cipherAlphabet if exists
    len = strlen(cipherAlphabet);
    if (cipherAlphabet[len - 1] == '\n') {
        cipherAlphabet[len - 1] = '\0';
    }

    // Validate cipher alphabet length
    if (strlen(cipherAlphabet) != 26) {
        printf("Error: Cipher alphabet must contain exactly 26 letters.\n");
        return 1;
    }

    // Convert to lowercase for consistency
    for (int i = 0; i < 26; i++) {
        cipherAlphabet[i] = tolower(cipherAlphabet[i]);
    }

    monoalphabeticEncrypt(plaintext, cipherAlphabet);

    printf("Encrypted text: %s\n", plaintext);

    return 0;
}
