#include <stdio.h>

// Compute GCD
int gcd(int a, int b) {
    while (b) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}

// Extended Euclidean Algorithm to find modular inverse
int extended_gcd(int a, int b, int *x, int *y) {
    if (a == 0) { *x = 0; *y = 1; return b; }
    int x1, y1;
    int gcd = extended_gcd(b % a, a, &x1, &y1);
    *x = y1 - (b / a) * x1;
    *y = x1;
    return gcd;
}

// Compute modular inverse
int mod_inverse(int a, int m) {
    int x, y;
    int g = extended_gcd(a, m, &x, &y);
    if (g != 1) return -1;
    return (x % m + m) % m;
}

// Simulate the attacker who knows (e, d, n) and tries to recover phi(n), then p and q
void attacker_factor(int e, int d, int n) {
    printf("\n=== Attacker Simulation ===\n");
    long long ed_minus_1 = (long long)e * d - 1;
    printf("ed - 1 = %lld\n", ed_minus_1);

    // Try small k such that ed - 1 = k * phi(n)
    for (int k = 1; k < 1000; k++) {
        if (ed_minus_1 % k != 0) continue;
        int phi = ed_minus_1 / k;

        // Try factoring n using phi = (p-1)(q-1)
        for (int p = 2; p < n; p++) {
            if (n % p != 0) continue;
            int q = n / p;
            if ((p - 1) * (q - 1) == phi) {
                printf("Recovered p = %d, q = %d\n", p, q);
                return;
            }
        }
    }
    printf("Attack failed to recover factors.\n");
}

int main() {
    // Bob's original key
    int p = 61, q = 53;
    int n = p * q;          // n = 3233
    int phi = (p - 1) * (q - 1); // 3120
    int e = 17;
    int d = mod_inverse(e, phi); // private key

    printf("=== Bob's Original Key ===\n");
    printf("p = %d, q = %d, n = %d\n", p, q, n);
    printf("e = %d (public), d = %d (private)\n", e, d);

    // Bob leaks d, but tries to change e
    int new_e = 257;
    int new_d = mod_inverse(new_e, phi); // he tries to generate new e/d with same n
    printf("\nBob changes key (but keeps same n):\n");
    printf("new e = %d, new d = %d\n", new_e, new_d);

    // Attacker uses leaked old d and e to find p, q
    attacker_factor(e, d, n);

    return 0;
}
