#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

// Fixed Playfair matrix
char matrix[SIZE][SIZE] = {
    {'M', 'F', 'H', 'I', 'K'},
    {'U', 'N', 'O', 'P', 'Q'},
    {'Z', 'V', 'W', 'X', 'Y'},
    {'E', 'L', 'A', 'R', 'G'},
    {'D', 'S', 'T', 'B', 'C'}
};

// Function to convert 'J' to 'I' and clean message
void preprocess(const char *input, char *output) {
    int i, j = 0;
    char prev = '\0';

    for (i = 0; input[i]; i++) {
        if (isalpha(input[i])) {
            char ch = toupper(input[i]);
            if (ch == 'J') ch = 'I';

            if (j % 2 == 1 && output[j - 1] == ch) {
                output[j++] = 'X'; // Insert 'X' between duplicate pair
            }
            output[j++] = ch;
        }
    }
    if (j % 2 == 1) output[j++] = 'X'; // Padding if odd
    output[j] = '\0';
}

// Find row and column of a character in the matrix
void findPos(char ch, int *row, int *col) {
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            if (matrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
}

// Encrypt the cleaned message
void playfairEncrypt(char *msg, char *cipher) {
    int i = 0, k = 0;
    while (msg[i] && msg[i + 1]) {
        char a = msg[i], b = msg[i + 1];
        int r1, c1, r2, c2;

        findPos(a, &r1, &c1);
        findPos(b, &r2, &c2);

        if (r1 == r2) { // Same row
            cipher[k++] = matrix[r1][(c1 + 1) % SIZE];
            cipher[k++] = matrix[r2][(c2 + 1) % SIZE];
        } else if (c1 == c2) { // Same column
            cipher[k++] = matrix[(r1 + 1) % SIZE][c1];
            cipher[k++] = matrix[(r2 + 1) % SIZE][c2];
        } else { // Rectangle rule
            cipher[k++] = matrix[r1][c2];
            cipher[k++] = matrix[r2][c1];
        }
        i += 2;
    }
    cipher[k] = '\0';
}

int main() {
    const char *message = "Must see you over Cadogan West. Coming at once.";
    char cleaned[200], cipher[200];

    preprocess(message, cleaned);
    playfairEncrypt(cleaned, cipher);

    printf("Original Message:\n%s\n", message);
    printf("\nPreprocessed Message:\n%s\n", cleaned);
    printf("\nEncrypted Message:\n%s\n", cipher);

    return 0;
}
